# 有效的数独
# 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
#
# 数字 1-9 在每一行只能出现一次。
# 数字 1-9 在每一列只能出现一次。
# 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
#
#
# 上图是一个部分填充的有效的数独。
#
# 数独部分空格内已填入了数字，空白格用 '.' 表示。
#
# 示例 1:
#
# 输入:
# [
#   ["5","3",".",".","7",".",".",".","."],
#   ["6",".",".","1","9","5",".",".","."],
#   [".","9","8",".",".",".",".","6","."],
#   ["8",".",".",".","6",".",".",".","3"],
#   ["4",".",".","8",".","3",".",".","1"],
#   ["7",".",".",".","2",".",".",".","6"],
#   [".","6",".",".",".",".","2","8","."],
#   [".",".",".","4","1","9",".",".","5"],
#   [".",".",".",".","8",".",".","7","9"]
# ]
# 输出: true
# 示例 2:
#
# 输入:
# [
#   ["8","3",".",".","7",".",".",".","."],
#   ["6",".",".","1","9","5",".",".","."],
#   [".","9","8",".",".",".",".","6","."],
#   ["8",".",".",".","6",".",".",".","3"],
#   ["4",".",".","8",".","3",".",".","1"],
#   ["7",".",".",".","2",".",".",".","6"],
#   [".","6",".",".",".",".","2","8","."],
#   [".",".",".","4","1","9",".",".","5"],
#   [".",".",".",".","8",".",".","7","9"]
# ]
# 输出: false
# 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
#      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
# 说明:
#
# 一个有效的数独（部分已被填充）不一定是可解的。
# 只需要根据以上规则，验证已经填入的数字是否有效即可。
# 给定数独序列只包含数字 1-9 和字符 '.' 。
# 给定数独永远是 9x9 形式的。


# 用循环遍历硬解？用set，9行各一个set，一个局部一个set。
# 思路：行、列、block，各9个set，用set判断
class Solution:
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        n = len(board)
        set_list = []
        [set_list.append(set()) for _ in range(9+9+9)]
        for i in range(n):
            for j in range(n):
                if board[i][j] == '.':
                    continue
                block = 0
                if i < 3:
                    if j < 3:
                        block = 0
                    elif j < 6:
                        block = 1
                    else:
                        block = 2
                elif i < 6:
                    if j < 3:
                        block = 3
                    elif j < 6:
                        block = 4
                    else:
                        block = 5
                else:
                    if j < 3:
                        block = 6
                    elif j < 6:
                        block = 7
                    else:
                        block = 8
                # print('i:{0},j:{1},val:{2},block:{3}'.format(i,j,board[i][j],block))
                if board[i][j] in set_list[i] or board[i][j] in set_list[n+j] or board[i][j] in set_list[n+n+block]:
                    return False
                set_list[i].add(board[i][j])
                set_list[n+j].add(board[i][j])
                set_list[n+n+block].add(board[i][j])
                # print(set_list)
        return True


matrix = [[".",".",".",".","5",".",".","1","."],
          [".","4",".","3",".",".",".",".","."],
          [".",".",".",".",".","3",".",".","1"],
          ["8",".",".",".",".",".",".","2","."],
          [".",".","2",".","7",".",".",".","."],
          [".","1","5",".",".",".",".",".","."],
          [".",".",".",".",".","2",".",".","."],
          [".","2",".","9",".",".",".",".","."],
          [".",".","4",".",".",".",".",".","."]]
s = Solution()
print(s.isValidSudoku(matrix))



# set_list = []
# [set_list.append(set()) for _ in range(9)]
# set_list[0].add(8)
# set_list[8].add(81)
# print(set_list)


# set1 = set()
# if 10 not in set1:
#     set1.add(10)
# if 11 not in set1:
#     set1.add(11)
# if 10 not in set1:
#     set1.add(10)
# else:
#     print('false')
# print(set1)











